{"version":3,"file":"static/js/315.7df1cf9c.chunk.js","mappings":"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","sources":["components/moderator/takeGeneralQuizAsAcandidate.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { connect } from 'react-redux'\r\nimport { Navigate as Redirect, useParams, useNavigate } from 'react-router-dom';\r\nimport { getAllQuestions, setAnswer } from \"../../actions/poll\";\r\nimport ArrowRight from \"../../icons/u_arrow-circle-right\";\r\nimport axios from 'axios';\r\nimport { loadProfile } from '../../actions/auth';\r\nconst General = (props) => {\r\n    const { id } = useParams();\r\n    const navigate = useNavigate();\r\n    console.log(id)\r\n\r\n    const [state, setState] = React.useState({\r\n        current: 0,\r\n        completed: [],\r\n        answers: [],\r\n        source: '',\r\n        politician: {\r\n            name: '',\r\n            picture: ''\r\n        },\r\n        loaded: false\r\n    })\r\n    React.useEffect(() => {\r\n\r\n        ((async () => {\r\n            let politician = await axios.get(`/api/politician/${id}`);\r\n            let answers = await axios.get('/api/answer-politician-general-question/' + id);\r\n            setState(state => ({ ...state, politician: politician.data.politician, answers: answers.data.answers, }))\r\n\r\n        }))()\r\n    }, []);\r\n    const setAnswer = async (answer, previousAnswer) => {\r\n        console.log(\"set answer\")\r\n        console.log(answer)\r\n\r\n        let answer1 = await axios.post('/api/answer-politician-general-question/' + props.generalQuestions.questions[state.current]._id + '/' + id + '/' + answer, { source: state.source[0]?.length > 4 ? state.source[0] : previousAnswer?.source[0].length > 4 ? previousAnswer.source[0] : 'none' });\r\n        let exists = state.answers.find(a => a.question.toString() === answer1.data.answer.question.toString())\r\n        if (!exists) {\r\n            setState(state => ({ ...state, answers: [...state.answers, answer1.data.answer], source: '' }))\r\n        }\r\n        else {\r\n            setState(state => ({\r\n                ...state, answers: state.answers.map(a => {\r\n                    console.log(a, answer1.data.answer);\r\n                    if (a.question.toString() === answer1.data.answer.question.toString()) {\r\n                        return answer1.data.answer\r\n                    }\r\n                    else {\r\n                        return a;\r\n                    }\r\n\r\n                })\r\n            }))\r\n        }\r\n        setTimeout(() => {\r\n            right();\r\n        }, 200)\r\n    }\r\n    const right = () => {\r\n        let answer = state.answers.find(a => {\r\n            if (a.question.toString() === props.generalQuestions.questions[state.current + 1]?._id.toString()) {\r\n                return a;\r\n            }\r\n        })\r\n        console.log(answer)\r\n        if (!answer) {\r\n            console.log('setting source to none')\r\n            setState(state => ({ ...state, source: ['', ''] }))\r\n        }\r\n        else {\r\n            setState(state => ({ ...state, source: answer?.source }))\r\n        }\r\n        setState(state => ({ ...state, current: state.current + 1 }));\r\n    }\r\n\r\n    const left = () => {\r\n        let answer = state.answers.find(a => {\r\n            if (a.question.toString() === props.generalQuestions.questions[state.current - 1]._id.toString()) {\r\n                return a;\r\n            }\r\n        })\r\n        if (!answer) {\r\n            setState(state => ({ ...state, source: '' }))\r\n        }\r\n        else {\r\n            setState(state => ({ ...state, source: answer?.source }))\r\n        }\r\n        setState(state => ({ ...state, current: state.current - 1 }));\r\n    }\r\n    const answers = [\"Strongly Agree\", \"Agree\", \"Unsure\", \"Disagree\", \"Strongly Disagree\"]\r\n    if (props.generalQuestions.loaded) {\r\n        if (!props.generalQuestions.questions[state.current]) {\r\n            return <Redirect to={'/candidate/' + id} />\r\n        }\r\n        let answer = state.answers.find(a => {\r\n            if (a.question.toString() === props.generalQuestions.questions[state.current]._id.toString()) {\r\n                return a;\r\n            }\r\n        })\r\n        if (answer && !state.loaded) {\r\n            setState(state => ({ ...state, source: answer.source, loaded: true }))\r\n        }\r\n        console.log(answer)\r\n\r\n        return (\r\n            <div className=\"poll-politicians\">\r\n                <div className=\"poll-politician\">\r\n                    <h3>You're taking the quiz as </h3>\r\n                    <div>\r\n                        <img src={state.politician.picture} alt={state.politician.name} />\r\n                        <p>{state.politician.name}</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"poll-container\">\r\n\r\n                    <div className=\"poll-general\">\r\n                        <div className=\"poll-general-question\">\r\n                            <h2 className=\"poll-general-question-title\">\r\n                                {props.generalQuestions.questions[state.current].question}\r\n                            </h2>\r\n                            <div className=\"poll-general-question-answer\">\r\n                                {answers.map((a, index) => <p onClick={setAnswer.bind(this, index, answer)} className={answer?.answer === index ? \"poll-general-question-answer-each poll-general-question-answer-each-selected\" : \"poll-general-question-answer-each\"}>\r\n                                    {a}\r\n                                </p>)}\r\n                                <input class=\"poll-politician-input\" value={state.source[0]} placeholder={\"Source\"} onChange={(e) => {\r\n                                    if (answer.source) {\r\n                                        setState(state => ({\r\n                                            ...state, answers: state.answers.map(a => {\r\n                                                if (a._id.toString() === answer._id) {\r\n                                                    return { ...a, source: [e.target.value, ''] }\r\n                                                }\r\n                                                else {\r\n                                                    return a;\r\n                                                }\r\n                                            })\r\n                                        }))\r\n                                    }\r\n                                    setState(state => ({ ...state, source: e.target.value }))\r\n\r\n                                }}></input>\r\n                                <p>Please enter the source before selecting the answer</p>\r\n                            </div>\r\n                            <div className=\"poll-arrows\">\r\n                                {state.current > 0 ? <span onClick={left}> <ArrowRight className=\"poll-arrows-left\" /></span> : null}\r\n\r\n                                <span onClick={right} className=\"poll-arrows-right\"><ArrowRight /></span>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"poll-general-key\">\r\n                            {props.generalQuestions.questions.map((question, index) => {\r\n                                return <div className=\"poll-general-key-each\" onClick={() => {\r\n                                    let answer = state.answers.find(a => {\r\n                                        if (a.question.toString() === props.generalQuestions.questions[index]._id.toString()) {\r\n                                            return a;\r\n                                        }\r\n                                    })\r\n                                    setState(state => ({ ...state, current: index, source: answer? answer?.source:['',''] }))\r\n\r\n                                }}><div className={index === state.current ? \"poll-general-key-each-selected\" : \"poll-general-key-each-unselected\"}><div className={state.answers.find(a => a.question.toString() === question._id.toString()) ? \"poll-general-key-each-filled\" : null} /></div> </div>\r\n                            })\r\n                            }\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>)\r\n    }\r\n    else {\r\n        return <div></div>\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        generalQuestions: state.poll\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getAllQuestions: async () => await getAllQuestions(dispatch)\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(General);"],"names":["connect","state","generalQuestions","poll","dispatch","getAllQuestions","props","id","useParams","useNavigate","console","log","React","current","completed","answers","source","politician","name","picture","loaded","setState","axios","data","setAnswer","answer","previousAnswer","questions","_id","length","answer1","exists","find","a","question","toString","map","setTimeout","right","to","className","src","alt","index","onClick","bind","class","value","placeholder","onChange","e","target"],"sourceRoot":""}